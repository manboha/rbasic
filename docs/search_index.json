[
["index.html", "A R Basic Manual 머리말", " A R Basic Manual Manboha 2020-06-14 머리말 이 책은 R을 공부하기 위한 기초 매뉴얼입니다. "],
["설치.html", "1 R 설치 1.1 R이란? 1.2 R 설치 1.3 R의 특징 1.4 RStudio 설치 1.5 R package 설치 및 사용 1.6 R package 관리", " 1 R 설치 1.1 R이란? R은 오픈소스 프로그램으로 다양한 통계분석, 데이터 마이닝, 그래프 작성 등을 위한 프로그래밍 언어입니다. 기존의 통계분석용 프로그램 중 대표적인 것으로 SAS, SPSS 등이 있고, 보조적인 프로그램으로 Excel 등을 들 수 있습니다. 비용이나 다양성 등을 고려하였을 때 R이 가장 우수하다고 볼 수 있습니다. 현재 많은 대학들이 R을 기반으로 데이터 분석 및 통계분석 수업을 진행하고 있습니다. R의 장점은 다음과 같습니다. R은 오픈소스로서 무료입니다. 프로그래밍 언어로서 사용자의 실력에 따라 매우 복잡한 분석도 쉽게 자동화하여 수행할 수 있습니다. 다양한 최신 통계분석 기법, 데이터 마이닝 기법, 그래프 작성 기법 등이 사용자들에 의해 제공됩니다. 전 세계적으로 사용자들이 다양한 예제를 공유합니다.(영문 예제 다수) 1.2 R 설치 R을 다운받기 위해 웹브라우저로 www.r-project.org 에 접속합니다.(또는 구글에서 R로 검색) 화면에서 [download R]을 클릭합니다. 서버 목록 중 Korea를 찾으시고 그 중에서 하나를 클릭합니다. 윈도우 버전을 설치할 경우 [Download R for Windows]를 클릭합니다. [base]를 클릭합니다. [Download R 3.x.x for Windows]를 클릭하여 PC에 다운로드 받습니다. 다운받은 파일을 실행시켜 프로그램을 설치합니다. (계속 [다음]을 눌러 설치 진행) R 설치가 끝난 후 바탕화면에 생성된 아이콘을 더블 클릭하면 R이 실행됩니다. R이 시작되면 R Console이라는 창이 열리고, 그 창에 &gt; 가 나타나는 데 R의 프롬프트입니다. “&gt;” 기호 다음에 필요한 명령문을 입력하고 Enter 키를 치면 입력된 명령문이 실행됩니다. 명령문이 실행되면 그 실행결과가 바로 다음 줄에 출력됩니다. 32*27 #&gt; [1] 864 1.3 R의 특징 R은 명령어를 1줄씩 처리하고 그 결과를 바로 보여주는 인터프리터 언어입니다. R의 콘솔창에 &gt; 기호(greater than sign, 부등호 기호)는 명령 프롬프트입니다. &gt; 뒤에 원하는 명령어를 입력하고 Enter를 치면 명령어가 실행됩니다. R은 대소문자를 구별합니다. 명령어를 입력할 때 대소문자를 명확히 파악하고 입력하여야 합니다. R 콘솔창에서 키보드의 상향(↑)를 누르면 이전에 실행했던 명령어를 순서대로 다시 불러올 수 있습니다. #은 주석 기호(메모 유사)입니다. 즉 맨 앞에 #이 있으면 그 줄은 실행하지 않습니다. 명령어를 입력할 때 오타가 많이 나고, 긴 명령어를 입력하거나 명령어를 재사용할 때는 R 콘솔창이 불편합니다. 따라서 주로 R스튜디오의 스크립트 창에서 명령어를 입력하고 [Ctrl + Enter]를 눌러 콘솔 창에 보내 명령어를 실행합니다. 1.4 RStudio 설치 R스튜디오을 다운받기 위해 웹브라우저로 www.rstudio.com 에 접속합니다. 상단 메뉴 [Product] → [RStudio]를 클릭합니다. [DOWNLOAD RSTUDIO DESKTOP]을 클릭한 후 [RStudio x.x.x - Windows Vista/7/8/10]를 클릭하여 PC에 다운로드 받습니다. 다운받은 파일을 실행시켜 프로그램을 설치합니다. 계속해서 [다음]을 눌러 설치를 진행하면 됩니다. R스튜디오 아이콘이 바탕화면에 없으면 다음과 같이 하여 아이콘을 바탕하면 만듭니다. [시작] → [모든 프로그램] → [Rstudio] → [Rstudio]를 마우스 오른쪽 단추로 클릭한 후 [보내기] → [바탕화면에 바로가기 만들기]를 클릭하여 바탕화면에 R스튜디오 아이콘을 만듭니다. 바탕화면의 R스튜디오 아이콘을 더블클릭하여 실행시킵니다. R스튜디오를 실행한 후 [File] → [New File] → [RScript]를 클릭하면 스크립트 창이 생성되면서, 총 4개의 창이 화면에 보입니다. 스크립트 창, 콘솔 창, 워크스페이스 창, 파일 등을 볼 수 있는 창입니다. 스크립트 창 : R 명령어를 입력하는 창입니다. 명령어에 커서를 두거나 명령어들을 선택하고 [Ctrl + Enter]를 누르면 콘솔 창에서 명령어가 실행됩니다. 스크립트 창의 장점은 명령어를 저장하고 불러올 수 있다는 점입니다. 콘솔 창 : 명령어가 실행되고 그 결과를 보여주는 창입니다. R의 콘솔 창과 거의 동일합니다. 워크스페이스 창 : 작업 중에 할당된 변수와 데이터를 보여주는 창입니다. 마지막 창은 파일, 그래프, 패키지, 도움말 등을 볼 수 있는 창입니다. 스크립트 창에서 32*79 라고 입력하고 [Ctrl + Enter]를 누르면 아래 콘솔 창에서 명령어가 실행되고, 그 결과 값인 2528이 출력되는 것을 볼 수 있습니다. 1.4.1 RStudio에서 프로젝트 만들기 RStudio에서 프로젝트를 만들면 하나의 폴더에서 코드와 데이터들을 체계적으로 관리할 수 있어 편리합니다. 새 프로젝트를 만드는 절차는 다음과 같습니다. (프로젝트 만들기) 메뉴 [File] → [New Project] 클릭 → [New Directory] → [New Project] → [Directory name]에 프로젝트이름 입력(예, rbasic) → 그 아래에 폴더 위치 지정(예, 바탕화면) → [Create Project] 클릭 (스크립트 파일 만들기) 메뉴 [File] → [New File] → [R Script]클릭 (스크립트에서 명령어 실행) 스크립트 창에서 32*27 을 입력하고 [Ctrl + Enter] 입력 (스크립트 저장) 메뉴 [File] → [save] → rbasic1.R 로 저장 프로젝트 이름으로 만들어진 폴더에 스크립트 파일들이 저장됩니다. 이 폴더에 데이터를 넣어두면 R에서 데이터를 불러올 때 편리합니다. 일종의 작업 디렉터리입니다. 1.5 R package 설치 및 사용 R 패키지는 목적에 맞게 R 함수, 데이터 등을 모아 놓은 것입니다. 현재 수천 개의 패키지가 존재합니다. 이 중에서 유용하고 중요한 패키지들을 골라내어 사용법을 익히는 것이 필요합니다. 패키지는 기본적으로 CRAN에 등록되어 있는 것을 다운 받아 설치합니다. 패키지를 설치하고 사용하는 방법은 다음 절차를 따릅니다. 패키지 설치하기 install.packages(“패키지명”) 패키지 로드하기 library(패키지명) 함수 사용하기 install.packages(&quot;ggplot2&quot;) # ggplot2 패키지 설치 library(ggplot2) # ggplot2 패키지 로드 x &lt;- c(&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;) qplot(x) # ggplot2에 있는 함수 qplot 사용하기 (빈도 막대그래프 출력) 2개 이상의 패키지를 한번의 명령으로 설치할 수도 있습니다. install.packages(c(&quot;rpart&quot;, &quot;survival&quot;)) CRAN이 아닌 Github로 부터 패키지를 다운 받아 설치하고자 한다면 devtools 패키지가 먼저 설치되어 있어야 합니다. install.packages(&quot;devtools&quot;) devtools::install_github(&quot;kassambara/survminer&quot;) RStudio에서는 패키지 창에서 Install 버튼을 눌러 패키지를 설치 할 수 있습니다. 1.6 R package 관리 1.6.1 설치된 패키지 보기 installed.packages() RStudio에서는 패키지 창에서 설치된 패키지들을 확인할 수 있습니다. 1.6.2 패키지가 설치된 폴더 보기 .libPaths() 1.6.3 로드된 패키지 보기 search() #&gt; [1] &quot;.GlobalEnv&quot; &quot;package:ggplot2&quot; &quot;package:stats&quot; #&gt; [4] &quot;package:graphics&quot; &quot;package:grDevices&quot; &quot;package:utils&quot; #&gt; [7] &quot;package:datasets&quot; &quot;package:methods&quot; &quot;Autoloads&quot; #&gt; [10] &quot;package:base&quot; 1.6.4 패키지 언로드 하기 (메모리에서 내리기) detach(package:ggplot2, unload = TRUE) 1.6.5 설치된 패키지 제거하기 remove.packages(&quot;rpart&quot;) 1.6.6 패키지 업데이트하기 # 모든 패키지 업데이트 update.packages() # 특정 패키지 업데이트 update.packages(oldPkgs = c(&quot;readr&quot;, &quot;ggplot2&quot;)) "],
["프로그래밍.html", "2 R 프로그래밍 기초 2.1 기초 산술 연산자 2.2 논리 연산자 2.3 기초 산술 함수 2.4 객체(변수)의 할당과 삭제 2.5 기본 데이터 타입 (Basic data types) 2.6 내장형 상수 Built-in Constants 2.7 예약어 Reserved Words", " 2 R 프로그래밍 기초 2.1 기초 산술 연산자 2.1.1 계산용 연산자 +(더하기), -(빼기), *(곱하기), /(나누기), ^(자승), %%(나머지), %/%(몫) 1 + 2 + (7 - 3) #&gt; [1] 7 6 / 3 * (5 + 7) #&gt; [1] 24 5^2 #&gt; [1] 25 5 %% 2 #&gt; [1] 1 5 %/% 2 #&gt; [1] 2 2.1.2 화씨온도가 100도라면 섭씨온도는? # 섭씨온도 = (5/9) * (화씨온도-32) (5 / 9) * (100 - 32) #&gt; [1] 37.8 2.2 논리 연산자 5 == 5 #&gt; [1] TRUE 5 != 5 #&gt; [1] FALSE 5 &gt; 5 #&gt; [1] FALSE 5 &gt;= 5 #&gt; [1] TRUE 3 &lt; 5 #&gt; [1] TRUE 6 &lt;= 5 #&gt; [1] FALSE !TRUE # Not x #&gt; [1] FALSE TRUE | FALSE # x OR y #&gt; [1] TRUE TRUE &amp; FALSE # x AND y #&gt; [1] FALSE isTRUE(TRUE) # if x is TRUE #&gt; [1] TRUE 2.3 기초 산술 함수 2.3.1 통계 함수 sum(c(2, 5, 6)) # 합계 #&gt; [1] 13 mean(c(2, 5, 6)) # 평균 #&gt; [1] 4.33 sd(c(2, 5, 6)) # 표준편차 #&gt; [1] 2.08 var(c(2, 5, 6)) # 분산 #&gt; [1] 4.33 median(c(2, 5, 6)) # 중위수 #&gt; [1] 5 max(c(1, 3, 5, 7)) # 최대값 #&gt; [1] 7 min(c(1, 3, 5, 7)) # 최소값 #&gt; [1] 1 IQR(c(1, 3, 5, 7)) # 사분위 범위 #&gt; [1] 3 quantile(c(1, 3, 5, 7), 0.25) # 백분위 수 #&gt; 25% #&gt; 2.5 range(c(1, 3, 5, 7)) # 최대값과 최소값 #&gt; [1] 1 7 2.3.2 로그 및 지수 함수 (Logarithms and Exponentials) log(10) # 자연로그 logarithms base e of x, e=2.7182818284⋯ #&gt; [1] 2.3 log2(10) # 이진로그 logarithms base 2 of x #&gt; [1] 3.32 log10(10) # 상용로그 logaritms base 10 of x #&gt; [1] 1 exp(10) # 지수 Exponential of x #&gt; [1] 22026 2.3.3 삼각 함수 x &lt;- 1 cos(x) # Cosine of x #&gt; [1] 0.54 sin(x) # Sine of x #&gt; [1] 0.841 tan(x) #Tangent of x #&gt; [1] 1.56 acos(x) # arc-cosine of x #&gt; [1] 0 asin(x) # arc-sine of x #&gt; [1] 1.57 atan(x) #arc-tangent of x #&gt; [1] 0.785 2.3.4 기타 수학 함수 pi # 파이 값 #&gt; [1] 3.14 abs(-3) # 절대 값 absolute value of x #&gt; [1] 3 sqrt(3) # 제곱근 square root of x #&gt; [1] 1.73 round(2.345, 2) # 반올림 #&gt; [1] 2.35 ceiling(2.345) # 정수로 올림 #&gt; [1] 3 floor(2.345) # 정수로 내림 #&gt; [1] 2 trunc(2.345) # 소수점 아래 버리기, 0에 더 가까운 값 반환 #&gt; [1] 2 signif(2.345, 3) # 전체 자릿수에 맞게 반올림 #&gt; [1] 2.35 프로젝트 전체에서 자리수를 지정하고 싶다면 options() 함수를 사용합니다. 자리수 디폴트는 7이지만 __options(digits = 5)__와 같이 지정하면 5자리로 설정됩니다. 2.4 객체(변수)의 할당과 삭제 2.4.1 객체(변수) 만들기 변수는 일종의 데이터를 담고 있는 상자입니다. 이 상자에는 숫자나 문자 등을 넣어 보관하거나 필요할 때 빼서 사용할 수 있습니다. 또 상자 안의 내용물을 바꿀 수도 있습니다. 변수명은 항상 왼쪽에 쓰며, ‘&lt;-’ 기호를 사용하여 변수라는 상자 안에 데이터를 넣을 수 있습니다. (예, a &lt;- 2) 또한 ‘&lt;-’ 기호 대신 ’=’를 사용하여도 됩니다. 변수명은 영어와 숫자 모두 사용할 수 있으나 시작 글자는 반드시 문자여야 합니다. # 3이라는 숫자를 변수 x에 담기 x &lt;- 3 # 5라는 숫자를 변수 y에 담기 y &lt;- 5 # 변수 x에 담긴 값을 출력 x #&gt; [1] 3 # print() 함수를 사용하여 출력 가능 print(y) #&gt; [1] 5 # 변수 x에 담긴 값과 변수 y에 담긴 값 계산 x * y # 3 * 5 #&gt; [1] 15 x + y # 3 + 5 #&gt; [1] 8 # x/y의 결과 값을 변수 z에 담기 z &lt;- x / y z #&gt; [1] 0.6 2.4.2 객체(변수) 리스트 보기 ls() #&gt; [1] &quot;x&quot; &quot;y&quot; &quot;z&quot; 2.4.3 객체(변수) 지우기 # 객체 x와 y 삭제 rm(x, y) # 남아 있는 객체 리스트 출력 ls() #&gt; [1] &quot;z&quot; 2.5 기본 데이터 타입 (Basic data types) 기본 데이터 타입으로 숫자(numeric), 문자(character), 논리(logical), 날짜(date), 결측치(missing) 등이 있습니다. # 숫자 데이터 my_age &lt;- 21 # 문자 데이터 - 문자는 따옴표(&quot; 또는 &#39;)로 둘러쌉니다. my_name &lt;- &quot;영희&quot; # 논리 데이터 - TRUE, FALSE is_student &lt;- TRUE # 날짜 데이터 my_birthday &lt;- as.Date(&quot;2007-08-02&quot;) # 결측치(missing data) - 논리 데이터의 일종 my_missing &lt;- NA 문자는 따옴표로 둘러싸는데, 만일 문자들 중에 따옴표가 있으면 \"\"을 추가합니다. my_say &lt;- &quot;나의 이름은 \\&quot;영희\\&quot;입니다.&quot; my_say #&gt; [1] &quot;나의 이름은 \\&quot;영희\\&quot;입니다.&quot; 데이터 타입을 확인하는 함수는 class()입니다. class(my_age) #&gt; [1] &quot;numeric&quot; class(my_name) #&gt; [1] &quot;character&quot; 객체의 데이터 타입이 숫자인지, 문자인지를 확인하는 함수도 있습니다. 맞으면 TRUE를 출력하고 틀리면 FALSE를 출력합니다. is.numeric(my_age) #&gt; [1] TRUE is.character(my_name) #&gt; [1] TRUE is.logical(is_student) #&gt; [1] TRUE is.na(my_missing) #&gt; [1] TRUE 만일 숫자가 따옴표로 둘려싸여 있어 문자로 인식될 경우 변환 함수를 이용하여 숫자 형식으로 변경할 수 있습니다. as.numeric(&quot;21&quot;) #&gt; [1] 21 2.5.1 숫자 데이터 - 실수와 정수 100000 # 1e+05 형태로 표시됨 #&gt; [1] 1e+05 150000000 # 1.5e+08 형태로 표시됨 #&gt; [1] 1.5e+08 5e+3 # 5000 #&gt; [1] 5000 5e-3 # 0.005 #&gt; [1] 0.005 # numeric 실수 x &lt;- 21 is.numeric(x) #&gt; [1] TRUE # 정수 y &lt;- 5L is.integer(y) #&gt; [1] TRUE typeof(5) # 부동소수점 실수 double #&gt; [1] &quot;double&quot; typeof(5L) # 정수 integer #&gt; [1] &quot;integer&quot; typeof(5i) # 복소수 complex #&gt; [1] &quot;complex&quot; # 정수와 실수가 같이 연산되면 결과값은 실수 4L * 2.8 #&gt; [1] 11.2 2.5.2 논리 데이터 - TRUE == 1, FALSE == 0 TRUE * 3 #&gt; [1] 3 FALSE * 3 #&gt; [1] 0 2.5.3 NULL 객체 객체에 NULL 값을 부여함으로써 객체를 삭제하는 데 사용되기도 합니다. x &lt;- c(21, NA, 23, NA, 25) str(x) #&gt; num [1:5] 21 NA 23 NA 25 # x에 NULL 부여 x &lt;- NULL str(x) #&gt; NULL 2.6 내장형 상수 Built-in Constants # 영어 알파벳 대문자 26개 LETTERS #&gt; [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; #&gt; [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; # 영어 알파벳 소문자 26개 letters #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; #&gt; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; # 영어 월 이름 약어 month.abb #&gt; [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot; &quot;Nov&quot; &quot;Dec&quot; # 영어 월 이름 month.name #&gt; [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; &quot;May&quot; &quot;June&quot; #&gt; [7] &quot;July&quot; &quot;August&quot; &quot;September&quot; &quot;October&quot; &quot;November&quot; &quot;December&quot; # 원주율 : 원의 지름에 대한 둘레의 비율 pi #&gt; [1] 3.14 2.7 예약어 Reserved Words R 예약어는 R에서 특별한 의미를 가지고 있는 단어입니다. 따라서 변수명이나 사용자가 만드는 함수 이름으로 사용하지 않는 것이 좋습니다. 예약어 : if, else, repeat, while, function, for, in, next, break, TRUE, FALSE, NULL, Inf, NaN, NA, NA_integer_, NA_real_, NA_complex_, NA_character_, …, ..1, ..2 등 R의 예약어를 알고 싶으면 다음과 같이 하면 됩니다. ?reserved "],
["r-데이터-구조.html", "3 R 데이터 구조 3.1 R 벡터 Vector 3.2 R 행렬 Matrix 3.3 R 팩터 Factor 3.4 R 배열 Array 3.5 R 데이터 프레임 Data frame 3.6 R 리스트 List", " 3 R 데이터 구조 3.1 R 벡터 Vector 벡터란 동일한 형태(예, 숫자 또는 문자)의 데이터 값들이 나열되어 있는 데이터 구조입니다. 3.1.1 벡터 만들기 3.1.1.1 c() 함수로 벡터 만들기 # 변수 v1에 숫자 1, 2, 3을 할당 v1 &lt;- c(1, 2, 3) v2 &lt;- c(4, 5, 6) v1; v2 #&gt; [1] 1 2 3 #&gt; [1] 4 5 6 # 변수 v3에 변수 v1과 v2의 값들을 결합하여 할당 v3 &lt;- c(v1, v2) v3 #&gt; [1] 1 2 3 4 5 6 # 변수 s1에 문자열 벡터인 &quot;대한&quot;, &quot;민국&quot;, &quot;행정&quot;을 할당 s1 &lt;- c(&quot;대한&quot;, &quot;민국&quot;, &quot;행정&quot;) s1 #&gt; [1] &quot;대한&quot; &quot;민국&quot; &quot;행정&quot; 3.1.1.2 연속적인 숫자로 벡터 만들기 # 콜론(:)을 이용해 연속 숫자가 들어 있는 변수 만들기 var1 &lt;- c(1:5) # 1~5까지의 연속 값 var1 #&gt; [1] 1 2 3 4 5 # seq() 함수를 이용해 연속 숫자가 들어 있는 변수 만들기 var2 &lt;- seq(1, 5) # 1~5까지의 연속 값 var2 #&gt; [1] 1 2 3 4 5 # seq() 함수의 by 옵션을 이용해 일정한 간격의 연속 숫자가 들어 있는 변수 만들기 var3 &lt;- seq(1, 10, by = 2) # 1~10까지 2간격의 연속 값 var4 &lt;- seq(1, 10, by = 3) # 1~10까지 3간격의 연속 값 var5 &lt;- seq(from = 1.0, to = 2.0, length.out = 5) var3; var4; var5 #&gt; [1] 1 3 5 7 9 #&gt; [1] 1 4 7 10 #&gt; [1] 1.00 1.25 1.50 1.75 2.00 # rep() 함수를 이용해 반복값이 들어있는 변수 만들기 var6 &lt;- rep(5, times = 7) # 5를 7번 반복 var7 &lt;- rep(c(&quot;a&quot;, &quot;b&quot;), each = 3) # 각 문자 3번 반복 var6; var7 #&gt; [1] 5 5 5 5 5 5 5 #&gt; [1] &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;b&quot; &quot;b&quot; &quot;b&quot; 3.1.1.3 벡터 요소 값에 이름 부여 # names() 함수를 이용해 값마다 이름 부여 mscore &lt;- c(95, 85, 75) names(mscore) &lt;- c(&quot;김철수&quot;, &quot;이영희&quot;, &quot;홍길동&quot;) mscore #&gt; 김철수 이영희 홍길동 #&gt; 95 85 75 3.1.2 벡터 요소 추출 벡터 안에 들어있는 값들을 요소라고 부릅니다. 3.1.2.1 특정 위치에 있는 요소 추출 벡터 내의 특정 위치에 있는 요소를 불러오려면 벡터명[번호]라고 하면 됩니다. v &lt;- c(11, 12, 13, 14, 15) w &lt;- c(1, 2, 3, 4, 5) v[1] #&gt; [1] 11 v[2:3] #&gt; [1] 12 13 v[c(1, 3, 5)] #&gt; [1] 11 13 15 w[seq(1, 5, 2)] # 홀수번째 값 출력 #&gt; [1] 1 3 5 3.1.2.2 이름으로 요소 추출 mscore &lt;- c(95, 85, 75) names(mscore) &lt;- c(&quot;김철수&quot;, &quot;이영희&quot;, &quot;홍길동&quot;) mscore[&quot;이영희&quot;] #&gt; 이영희 #&gt; 85 3.1.2.3 마이너스 기호(-)를 이용하여 요소 제외 # -를 사용하면 원하지 않는 값을 제외할 수 있음 v[-2] #&gt; [1] 11 13 14 15 w[-c(3:4)] #&gt; [1] 1 2 5 3.1.2.4 조건으로 요소 추출 s &lt;- c(3, 1, 5, 9, 7, 10) # 5보다 큰 값을 골라내 부분 벡터로 추출 s[s &gt;= 5] #&gt; [1] 5 9 7 10 # 8보다 큰 값을 골라내 부분 벡터로 추출 subset(s, s &gt;= 8) #&gt; [1] 9 10 # s에서 8보다 큰 element를 가진 index를 리턴 which(s &gt;= 8) #&gt; [1] 4 6 3.1.3 벡터 연산 v &lt;- c(11, 12, 13, 14, 15) w &lt;- c(1, 2, 3, 4, 5) v[1] + w[5] # 11+5=16 #&gt; [1] 16 v + w # 11+1, 12+2, ... #&gt; [1] 12 14 16 18 20 v * w # 11*1, 12*2, ... #&gt; [1] 11 24 39 56 75 w + 2 # 1+2, 2+2, ... #&gt; [1] 3 4 5 6 7 w - mean(w) # 1-평균, 2-평균, ... #&gt; [1] -2 -1 0 1 2 sqrt(w) # sqrt(1), sqrt(2), ... #&gt; [1] 1.00 1.41 1.73 2.00 2.24 sum(w) # 1+2+3+4+5 #&gt; [1] 15 3.1.4 기타 3.1.4.1 벡터 길이 측정 length(v) #&gt; [1] 5 3.1.4.2 벡터 결측값 # 결측값이 있는 벡터 생성 have_child &lt;- c(김철수 = &quot;yes&quot;, 이영철 = &quot;yes&quot;, 홍길동 = NA, 김연아 = NA) # 결측값 유무 검사 is.na(have_child) #&gt; 김철수 이영철 홍길동 김연아 #&gt; FALSE FALSE TRUE TRUE 3.2 R 행렬 Matrix 동일한 형태의 데이터가 2차원으로 구성된 데이터 구조입니다. 표처럼 m × n 형태로 이루어진 데이터 구조입니다. 3.2.1 행렬 생성 3.2.1.1 matrix()를 사용하여 행렬 생성 # 1부터 12까지의 숫자를 3개열 형태의 행렬로 만들어 변수 m1에 할당 # ncol : 열의 수 m1 &lt;- matrix(1:12, ncol = 3) m1 #&gt; [,1] [,2] [,3] #&gt; [1,] 1 5 9 #&gt; [2,] 2 6 10 #&gt; [3,] 3 7 11 #&gt; [4,] 4 8 12 # nrow : 행의 수 # byrow : FALSE(기본값)이면 행렬이 열로 채워지고 그렇지 않으면 행렬이 행으로 채워짐 m2 &lt;- matrix( data = c(1,2,3, 11,12,13), nrow = 2, byrow = TRUE ) m2 #&gt; [,1] [,2] [,3] #&gt; [1,] 1 2 3 #&gt; [2,] 11 12 13 3.2.1.2 cbind() 또는 rbind()를 사용하여 행렬 생성 # 숫자 벡터 생성 col1 &lt;- c(5, 6, 7, 8, 9) col2 &lt;- c(2, 4, 5, 9, 8) col3 &lt;- c(7, 3, 4, 8, 7) # 열 기준으로 벡터 병합 m3 &lt;- cbind(col1, col2, col3) m3 #&gt; col1 col2 col3 #&gt; [1,] 5 2 7 #&gt; [2,] 6 4 3 #&gt; [3,] 7 5 4 #&gt; [4,] 8 9 8 #&gt; [5,] 9 8 7 3.2.2 행렬 이름 붙이기 3.2.2.1 rownames() 또는 colnames()를 사용하여 이름 붙이기 rownames(m3) &lt;- c(&quot;행1&quot;, &quot;행2&quot;, &quot;행3&quot;, &quot;행4&quot;, &quot;행5&quot;) colnames(m3) &lt;- c(&quot;열1&quot;, &quot;열2&quot;, &quot;열3&quot;) m3 #&gt; 열1 열2 열3 #&gt; 행1 5 2 7 #&gt; 행2 6 4 3 #&gt; 행3 7 5 4 #&gt; 행4 8 9 8 #&gt; 행5 9 8 7 3.2.2.2 matrix()의 dimnames 속성을 이용하여 이름 붙이기 m4 &lt;- matrix( data = c(1,2,3, 11,12,13), nrow = 2, byrow = TRUE, dimnames = list(c(&quot;행1&quot;, &quot;행2&quot;), c(&quot;일열&quot;, &quot;이열&quot;, &quot;삼열&quot;)) ) m4 #&gt; 일열 이열 삼열 #&gt; 행1 1 2 3 #&gt; 행2 11 12 13 3.2.3 행열 바꾸기 t(m2) #&gt; [,1] [,2] #&gt; [1,] 1 11 #&gt; [2,] 2 12 #&gt; [3,] 3 13 3.2.4 행렬의 차원 # 행의 갯수 nrow(m3) #&gt; [1] 5 # 열의 갯수 ncol(m3) #&gt; [1] 3 # 행과 열이 갯수 dim(m3) #&gt; [1] 5 3 3.2.5 행렬의 요소 추출 3.2.5.1 특정 위치에 있는 요소 추출 # 2번째 행에 있는 요소 추출 m3[2,] #&gt; 열1 열2 열3 #&gt; 6 4 3 # 2행 3열에 있는 요소 추출 m3[2, 3] #&gt; [1] 3 # 2행에서 3행 추출 m3[2:3,] #&gt; 열1 열2 열3 #&gt; 행2 6 4 3 #&gt; 행3 7 5 4 # 2행과 5행 추출 m3[c(2,5),] #&gt; 열1 열2 열3 #&gt; 행2 6 4 3 #&gt; 행5 9 8 7 3.2.5.2 행렬 이름으로 요소 추출 # 두번째 열 추출 m3[, &quot;열2&quot;] #&gt; 행1 행2 행3 행4 행5 #&gt; 2 4 5 9 8 # 세번째 행 추출 m3[&quot;행3&quot;,] #&gt; 열1 열2 열3 #&gt; 7 5 4 3.2.5.3 마이너스 기호(-)를 이용하여 요소 제외 # 2행과 2열 제외 m3[-2, -2] #&gt; 열1 열3 #&gt; 행1 5 7 #&gt; 행3 7 4 #&gt; 행4 8 8 #&gt; 행5 9 7 3.2.5.4 조건으로 요소 추출 # 3열의 값이 5이상인 경우 추출 col3 &lt;- m3[, 3] m3[col3 &gt;= 5,] #&gt; 열1 열2 열3 #&gt; 행1 5 2 7 #&gt; 행4 8 9 8 #&gt; 행5 9 8 7 # 5보다 큰 수 모두 추출 m3[m3 &gt; 5] #&gt; [1] 6 7 8 9 9 8 7 8 7 # 짝수만 추출 m3[m3 %% 2 == 0] #&gt; [1] 6 8 2 4 8 4 8 3.2.6 행렬 요소 수정 # 하나의 요소 값 수정 mm &lt;- m3; mm #&gt; 열1 열2 열3 #&gt; 행1 5 2 7 #&gt; 행2 6 4 3 #&gt; 행3 7 5 4 #&gt; 행4 8 9 8 #&gt; 행5 9 8 7 mm[2, 2] &lt;- 9; mm #&gt; 열1 열2 열3 #&gt; 행1 5 2 7 #&gt; 행2 6 9 3 #&gt; 행3 7 5 4 #&gt; 행4 8 9 8 #&gt; 행5 9 8 7 # 5미만 인 경우 0으로 수정 mm[mm &lt; 6] &lt;- 0; mm #&gt; 열1 열2 열3 #&gt; 행1 0 0 7 #&gt; 행2 6 9 0 #&gt; 행3 7 0 0 #&gt; 행4 8 9 8 #&gt; 행5 9 8 7 3.2.7 행렬 연산 m1 * 2 #&gt; [,1] [,2] [,3] #&gt; [1,] 2 10 18 #&gt; [2,] 4 12 20 #&gt; [3,] 6 14 22 #&gt; [4,] 8 16 24 log2(m1) #&gt; [,1] [,2] [,3] #&gt; [1,] 0.00 2.32 3.17 #&gt; [2,] 1.00 2.58 3.32 #&gt; [3,] 1.58 2.81 3.46 #&gt; [4,] 2.00 3.00 3.58 # 행합계 rowSums() rowSums(m3) #&gt; 행1 행2 행3 행4 행5 #&gt; 14 13 16 25 24 # 열합계 colSums() colSums(m3) #&gt; 열1 열2 열3 #&gt; 35 28 29 # 행 평균 apply(m3, 1, mean) #&gt; 행1 행2 행3 행4 행5 #&gt; 4.67 4.33 5.33 8.33 8.00 # 열 평균 apply(m3, 2, mean) #&gt; 열1 열2 열3 #&gt; 7.0 5.6 5.8 행렬곱 %*% 행열간의 곱하기는 수학적으로 곱이 가능한 형태를 갖는 행렬만이 가능합니다. x &lt;- matrix(1:9, nrow = 3) y &lt;- matrix(11:19, nrow = 3) x %*% y #&gt; [,1] [,2] [,3] #&gt; [1,] 150 186 222 #&gt; [2,] 186 231 276 #&gt; [3,] 222 276 330 3.3 R 팩터 Factor 범주형(명목형) 자료의 데이터 구조입니다. Levles는 이 팩터(요인)가 가질 수 있는 값들입니다. 예를 들면 성별 데이터는 범주형 데이터로서 팩터 데이터 구조를 가질 수 있는데, “남성”와 “여성”은 Levels라 할 수 있습니다. R에서 분석을 하다보면 팩터형식의 데이터이어야 하는 경우가 있고, 팩터형식이 아니어야 하는 경우가 있습니다. 상황에 따라 적절한 형식으로 변환하며 사용해야 합니다. 3.3.1 팩터 변수 만들기 sex &lt;- factor(c(&quot;남성&quot;, &quot;여성&quot;, &quot;여성&quot;, &quot;남성&quot;, &quot;남성&quot;)) sex #&gt; [1] 남성 여성 여성 남성 남성 #&gt; Levels: 남성 여성 sex &lt;- c(&quot;남성&quot;, &quot;여성&quot;, &quot;여성&quot;, &quot;남성&quot;, &quot;남성&quot;) sex &lt;- factor(sex) # Or sex &lt;- factor(sex, levels = c(&quot;여성&quot;, &quot;남성&quot;)) sex #&gt; [1] 남성 여성 여성 남성 남성 #&gt; Levels: 여성 남성 # 팩터 변수의 levels 보기 levels(sex) #&gt; [1] &quot;여성&quot; &quot;남성&quot; 팩터는 벡터와 밀접한 관계입니다. 사실상 펙터는 정수 벡터로 저장된 데이터 구조입니다. 아래에서 보듯이 levels는 문자로 저장되어 있으나, 각 요소는 숫자로 저장되어 있습니다. 1은 여성이고 2는 남성인 것입니다. str(sex) #&gt; Factor w/ 2 levels &quot;여성&quot;,&quot;남성&quot;: 2 1 1 2 2 3.3.2 팩터 요소 추출 팩터의 요소 추출은 벡터와 유사합니다. sex[3] #&gt; [1] 여성 #&gt; Levels: 여성 남성 sex[c(1, 3)] #&gt; [1] 남성 여성 #&gt; Levels: 여성 남성 sex[-1] #&gt; [1] 여성 여성 남성 남성 #&gt; Levels: 여성 남성 3.3.3 팩터 요소 수정 팩터 요소의 수정은 벡터와 비슷하나, Levels 값의 범위를 벗어날 수 없습니다. sex[1] &lt;- &quot;여성&quot; sex #&gt; [1] 여성 여성 여성 남성 남성 #&gt; Levels: 여성 남성 sex[1] &lt;- &quot;양성&quot; #&gt; Warning in `[&lt;-.factor`(`*tmp*`, 1, value = &quot;양성&quot;): invalid factor level, NA #&gt; generated sex #&gt; [1] &lt;NA&gt; 여성 여성 남성 남성 #&gt; Levels: 여성 남성 Levels 값의 범위를 벗어난 값을 추가하려면 먼저 새로운 Levels 값을 추가합니다. # 새로운 Levels 값 추가 levels(sex) &lt;- c(levels(sex), &quot;양성&quot;) sex[1] &lt;- &quot;양성&quot; sex #&gt; [1] 양성 여성 여성 남성 남성 #&gt; Levels: 여성 남성 양성 3.3.4 기타 3.3.4.1 팩터 레벨의 순서 변경 팩터 레벨의 순서는 levels 속성에서 정의하여 줍니다. sex &lt;- factor(sex, levels = c(&quot;여성&quot;, &quot;양성&quot;, &quot;남성&quot;)) sex #&gt; [1] 양성 여성 여성 남성 남성 #&gt; Levels: 여성 양성 남성 3.3.4.2 팩터 형식 검사 is.factor(sex) #&gt; [1] TRUE 3.3.4.3 팩터 변환 factor()와 as.factor()는 거의 유사하나, 입력 데이터가 이미 factor이거나 vector이면 as.factor()의 속도가 더 빠릅니다. pf &lt;- c(1, 5, 1, 3, 3, 2, 4, 2, 5, 1, 3, 5) pf &lt;- as.factor(pf) pf #&gt; [1] 1 5 1 3 3 2 4 2 5 1 3 5 #&gt; Levels: 1 2 3 4 5 3.3.4.4 팩터 변수 요약 summary(sex) #&gt; 여성 양성 남성 #&gt; 2 1 2 3.4 R 배열 Array 배열은 동일한 형태의 데이터가 2차원 이상으로 구성된 데이터 구조입니다. 벡터가 1차원이고, 행렬은 2차원, 배열은 2차원 이상의 구조입니다. 배열은 행렬을 층층히 쌓으면서 3차원, 4차원, 5차원 등으로 확대할 수 있습니다. 3.4.1 배열 생성 # 1~24의 숫자를 3x4 행렬의 2층 짜리 배열 만들기 arr1 &lt;- array(1:24, dim = c(3, 4, 2)) arr1 #&gt; , , 1 #&gt; #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 4 7 10 #&gt; [2,] 2 5 8 11 #&gt; [3,] 3 6 9 12 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 13 16 19 22 #&gt; [2,] 14 17 20 23 #&gt; [3,] 15 18 21 24 3.4.2 배열 이름 붙이기 # array()의 dimnames 속성을 이용하여 이름 붙이기 arr2 &lt;- array( data = 1:24, dim = c(4, 3, 2), dimnames = list(c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;), c(&quot;ray&quot;, &quot;karl&quot;, &quot;mimo&quot;), c(&quot;steve&quot;, &quot;mark&quot;) ) ) arr2 #&gt; , , steve #&gt; #&gt; ray karl mimo #&gt; one 1 5 9 #&gt; two 2 6 10 #&gt; three 3 7 11 #&gt; four 4 8 12 #&gt; #&gt; , , mark #&gt; #&gt; ray karl mimo #&gt; one 13 17 21 #&gt; two 14 18 22 #&gt; three 15 19 23 #&gt; four 16 20 24 3.4.3 배열의 요소 추출 3.4.3.1 특정위치에 있는 요소 추출 # 2행, 2열, 2층 요소 추출 arr2[2, 2, 2] #&gt; [1] 18 # 각 층의 2행 추출 arr2[2, , ] #&gt; steve mark #&gt; ray 2 14 #&gt; karl 6 18 #&gt; mimo 10 22 # 각층의 3행, 3열 요소 추출 arr2[3, 3, ] #&gt; steve mark #&gt; 11 23 # 2층의 행렬 추출 arr2[,,2] #&gt; ray karl mimo #&gt; one 13 17 21 #&gt; two 14 18 22 #&gt; three 15 19 23 #&gt; four 16 20 24 3.4.3.2 이름으로 요소 추출 # 2행(two), 2열(karl), 2층(mark) 요소 추출 arr2[&quot;two&quot;, &quot;karl&quot;, &quot;mark&quot;] #&gt; [1] 18 # 각 층의 2행(two) 추출 arr2[&quot;two&quot;, , ] #&gt; steve mark #&gt; ray 2 14 #&gt; karl 6 18 #&gt; mimo 10 22 # 각층의 3행(three), 3열(mimo) 요소 추출 arr2[&quot;three&quot;, &quot;mimo&quot;, ] #&gt; steve mark #&gt; 11 23 # 2층(mark)의 행렬 추출 arr2[,,&quot;mark&quot;] #&gt; ray karl mimo #&gt; one 13 17 21 #&gt; two 14 18 22 #&gt; three 15 19 23 #&gt; four 16 20 24 3.4.3.3 마이너스 기호(-)를 이용하여 요소 제외 # 2행과 2열 제외 arr2[-2, -2, ] #&gt; , , steve #&gt; #&gt; ray mimo #&gt; one 1 9 #&gt; three 3 11 #&gt; four 4 12 #&gt; #&gt; , , mark #&gt; #&gt; ray mimo #&gt; one 13 21 #&gt; three 15 23 #&gt; four 16 24 3.4.3.4 조건으로 요소 추출 # 11초과인 값 추출 arr2[arr2 &gt; 11] #&gt; [1] 12 13 14 15 16 17 18 19 20 21 22 23 24 # 짝수 추출 arr2[arr2 %% 2 == 0] #&gt; [1] 2 4 6 8 10 12 14 16 18 20 22 24 3.4.4 배열 요소 수정 arr2[2, 2, 1] &lt;- 55 arr2 #&gt; , , steve #&gt; #&gt; ray karl mimo #&gt; one 1 5 9 #&gt; two 2 55 10 #&gt; three 3 7 11 #&gt; four 4 8 12 #&gt; #&gt; , , mark #&gt; #&gt; ray karl mimo #&gt; one 13 17 21 #&gt; two 14 18 22 #&gt; three 15 19 23 #&gt; four 16 20 24 3.4.5 배열 연산 arr2 * 3 #&gt; , , steve #&gt; #&gt; ray karl mimo #&gt; one 3 15 27 #&gt; two 6 165 30 #&gt; three 9 21 33 #&gt; four 12 24 36 #&gt; #&gt; , , mark #&gt; #&gt; ray karl mimo #&gt; one 39 51 63 #&gt; two 42 54 66 #&gt; three 45 57 69 #&gt; four 48 60 72 rowSums(arr2) #&gt; one two three four #&gt; 66 121 78 84 colSums(arr2) #&gt; steve mark #&gt; ray 10 58 #&gt; karl 75 74 #&gt; mimo 42 90 배열의 차원이 같다면 배열끼리 계산이 가능합니다. ax &lt;- array(1:12, dim = c(2, 3, 2)) ay &lt;- array(11:22, dim = c(2, 3, 2)) ax; ay #&gt; , , 1 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 1 3 5 #&gt; [2,] 2 4 6 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 7 9 11 #&gt; [2,] 8 10 12 #&gt; , , 1 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 11 13 15 #&gt; [2,] 12 14 16 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 17 19 21 #&gt; [2,] 18 20 22 ax + ay #&gt; , , 1 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 12 16 20 #&gt; [2,] 14 18 22 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 24 28 32 #&gt; [2,] 26 30 34 ax * ay #&gt; , , 1 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 11 39 75 #&gt; [2,] 24 56 96 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 119 171 231 #&gt; [2,] 144 200 264 ax / ay #&gt; , , 1 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 0.0909 0.231 0.333 #&gt; [2,] 0.1667 0.286 0.375 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 0.412 0.474 0.524 #&gt; [2,] 0.444 0.500 0.545 ax + (1:2) #&gt; , , 1 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 2 4 6 #&gt; [2,] 4 6 8 #&gt; #&gt; , , 2 #&gt; #&gt; [,1] [,2] [,3] #&gt; [1,] 8 10 12 #&gt; [2,] 10 12 14 3.5 R 데이터 프레임 Data frame 데이터 프레임은 다양한 형태의 데이터가 2차원으로 구성된 데이터 구조입니다. 행(케이스)과 열(변수)로 구성된 표와 같이 생겼습니다. 엑셀에서 이름 필드, 연령 필드, 성적 필드 등으로 이루어진 표와 같다고 보면 됩니다. 통계분석에 가장 많이 사용됩니다. 3.5.1 데이터 프레임 만들기 데이터 프레임을 생성하는 방법은 많습니다. 그 중에서 가장 많이 쓰이는 방법은 외부에서 만들어진 정리된 데이터를 R에서 읽어 들이는 방법입니다. 이 방법은 R 입출력에서 자세히 다루겠습니다. 두 번째 방법은 벡터 형식의 자료를 묶어서 데이터 프레임을 만드는 것입니다. 아래 예제는 data.frame 함수를 이용하여 벡터 변수 name, age, sex, score를 하나로 묶어서 데이터 프레임 df를 만들어 보겠습니다. name &lt;- c(&quot;유재석&quot;, &quot;홍진영&quot;, &quot;송가인&quot;, &quot;강호동&quot;, &quot;이영자&quot;, &quot;김종민&quot;, &quot;김연아&quot;) age &lt;- c(24, 28, 31, 25, 27, 22, 29) sex &lt;- c(&quot;남&quot;, &quot;여&quot;, &quot;여&quot;, &quot;남&quot;, &quot;여&quot;, &quot;남&quot;, &quot;여&quot;) score &lt;- c(90, 80, 85, 75, 95, 80, 70) # &#39;stringsAsFactors = FALSE&#39; 옵션 : 문자 데이터를 팩터로 변환시키지 않음 df &lt;- data.frame(name, age, sex, score, stringsAsFactors = FALSE) df #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 2 홍진영 28 여 80 #&gt; 3 송가인 31 여 85 #&gt; 4 강호동 25 남 75 #&gt; 5 이영자 27 여 95 #&gt; 6 김종민 22 남 80 #&gt; 7 김연아 29 여 70 3.5.2 데이터 프레임 구조 보기 # 데이터 프레임 구조 str(df) #&gt; &#39;data.frame&#39;: 7 obs. of 4 variables: #&gt; $ name : chr &quot;유재석&quot; &quot;홍진영&quot; &quot;송가인&quot; &quot;강호동&quot; ... #&gt; $ age : num 24 28 31 25 27 22 29 #&gt; $ sex : chr &quot;남&quot; &quot;여&quot; &quot;여&quot; &quot;남&quot; ... #&gt; $ score: num 90 80 85 75 95 80 70 # 행 개수 nrow(df) #&gt; [1] 7 # 열 개수 ncol(df) #&gt; [1] 4 3.5.3 데이터 프레임 요약 보기 summary(df) #&gt; name age sex score #&gt; Length:7 Min. :22.0 Length:7 Min. :70.0 #&gt; Class :character 1st Qu.:24.5 Class :character 1st Qu.:77.5 #&gt; Mode :character Median :27.0 Mode :character Median :80.0 #&gt; Mean :26.6 Mean :82.1 #&gt; 3rd Qu.:28.5 3rd Qu.:87.5 #&gt; Max. :31.0 Max. :95.0 3.5.4 데이터 프레임에서 데이터 추출 3.5.4.1 특정 위치(행과 열 기준)에 있는 데이터 추출하기 # name 열(변수) 데이터 추출 # 데이터프레임과 컬럼사이에 $기호가 사용됨 df$name #&gt; [1] &quot;유재석&quot; &quot;홍진영&quot; &quot;송가인&quot; &quot;강호동&quot; &quot;이영자&quot; &quot;김종민&quot; &quot;김연아&quot; # df$name 대신 아래처럼 사용 가능 df[, &quot;name&quot;] #&gt; [1] &quot;유재석&quot; &quot;홍진영&quot; &quot;송가인&quot; &quot;강호동&quot; &quot;이영자&quot; &quot;김종민&quot; &quot;김연아&quot; # 첫번째 열(name) 추출 df[, 1] #&gt; [1] &quot;유재석&quot; &quot;홍진영&quot; &quot;송가인&quot; &quot;강호동&quot; &quot;이영자&quot; &quot;김종민&quot; &quot;김연아&quot; # 1열과 3열 추출 df[, c(1, 3)] #&gt; name sex #&gt; 1 유재석 남 #&gt; 2 홍진영 여 #&gt; 3 송가인 여 #&gt; 4 강호동 남 #&gt; 5 이영자 여 #&gt; 6 김종민 남 #&gt; 7 김연아 여 # name 열(변수)의 3번째 데이터 추출 df$name[3] #&gt; [1] &quot;송가인&quot; # 2~3번째 행 추출 df[2:3, ] #&gt; name age sex score #&gt; 2 홍진영 28 여 80 #&gt; 3 송가인 31 여 85 # 연령 변수의 데이터를 추출하여 평균을 구함 # na.rm = TRUE는 missing value를 제외하고 계산함 mean(df$age, na.rm = TRUE) #&gt; [1] 26.6 3.5.4.2 마이너스 기호(-)를 이용하여 데이터 제외 # 3번째 열 제외 df[, -3] #&gt; name age score #&gt; 1 유재석 24 90 #&gt; 2 홍진영 28 80 #&gt; 3 송가인 31 85 #&gt; 4 강호동 25 75 #&gt; 5 이영자 27 95 #&gt; 6 김종민 22 80 #&gt; 7 김연아 29 70 3.5.4.3 조건으로 데이터 추출 특정 조건에 맞는 데이터만 추출할 때 대괄호 안에 조건식을 입력하여 추출하거나 subset 함수를 이용하여 추출할 수 있습니다. 데이터가 매우 많을 경우에는 대괄호 안에 조건식을 입력하여 추출하는 것이 subset 함수를 이용하는 것 보다 더 빠릅니다. 3.5.4.3.1 대괄호 안에 조건식 입력하여 추출 # score가 90이상인 데이터 추출 df[df$score &gt;= 90, ] #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 5 이영자 27 여 95 # score가 90이상인 데이터의 name과 age만 추출 # 1:2 대신 c(&quot;name&quot;, &quot;age&quot;)를 사용해도 됨 df[df$score &gt;= 90, 1:2] #&gt; name age #&gt; 1 유재석 24 #&gt; 5 이영자 27 # 조건식과 출력 컬럼명을 변수에 입력하고 이를 활용 score90 &lt;- df$score &gt;= 90 cols &lt;- c(&quot;name&quot;, &quot;age&quot;) df[score90, cols] #&gt; name age #&gt; 1 유재석 24 #&gt; 5 이영자 27 3.5.4.3.2 subset()을 이용하여 추출 # score가 90이상인 데이터 추출 subset(df, score &gt;= 90) #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 5 이영자 27 여 95 # score가 90이상인 데이터의 name과 age만 추출 subset(df, score &gt;= 90, select = c(&quot;name&quot;, &quot;age&quot;)) #&gt; name age #&gt; 1 유재석 24 #&gt; 5 이영자 27 # score가 90이상인 데이터에서 age와 sex만 제외하고 추출 subset(df, score &gt;= 90, select = -(age:sex)) #&gt; name score #&gt; 1 유재석 90 #&gt; 5 이영자 95 3.5.5 데이터 프레임의 데이터 수정 # 2번째 행에 있는 홍진영의 age를 29로 수정 df$age[2] &lt;- 29 df #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 2 홍진영 29 여 80 #&gt; 3 송가인 31 여 85 #&gt; 4 강호동 25 남 75 #&gt; 5 이영자 27 여 95 #&gt; 6 김종민 22 남 80 #&gt; 7 김연아 29 여 70 # 3행에 있는 송가인의 score를 95로 수정 df[3, &quot;score&quot;] &lt;- 95 df #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 2 홍진영 29 여 80 #&gt; 3 송가인 31 여 95 #&gt; 4 강호동 25 남 75 #&gt; 5 이영자 27 여 95 #&gt; 6 김종민 22 남 80 #&gt; 7 김연아 29 여 70 3.5.6 데이터 프레임 구조 수정 3.5.6.1 데이터 프레임 행열 추가 3.5.6.1.1 행 추가 new_data &lt;- list(&quot;김남준&quot;, 24, &quot;남&quot;, 92) new_data #&gt; [[1]] #&gt; [1] &quot;김남준&quot; #&gt; #&gt; [[2]] #&gt; [1] 24 #&gt; #&gt; [[3]] #&gt; [1] &quot;남&quot; #&gt; #&gt; [[4]] #&gt; [1] 92 df &lt;- rbind(df, new_data) df #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 2 홍진영 29 여 80 #&gt; 3 송가인 31 여 95 #&gt; 4 강호동 25 남 75 #&gt; 5 이영자 27 여 95 #&gt; 6 김종민 22 남 80 #&gt; 7 김연아 29 여 70 #&gt; 8 김남준 24 남 92 new_data &lt;- data.frame( name = &quot;이지은&quot;, age = 26, sex = &quot;여&quot;, score = 93) df &lt;- rbind(df, new_data) df #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 2 홍진영 29 여 80 #&gt; 3 송가인 31 여 95 #&gt; 4 강호동 25 남 75 #&gt; 5 이영자 27 여 95 #&gt; 6 김종민 22 남 80 #&gt; 7 김연아 29 여 70 #&gt; 8 김남준 24 남 92 #&gt; 9 이지은 26 여 93 3.5.6.1.2 열 추가 # salary 열 추가 df$salary &lt;- c(220, 180, 250, 170, 220, 270, 250, 290, 210) df #&gt; name age sex score salary #&gt; 1 유재석 24 남 90 220 #&gt; 2 홍진영 29 여 80 180 #&gt; 3 송가인 31 여 95 250 #&gt; 4 강호동 25 남 75 170 #&gt; 5 이영자 27 여 95 220 #&gt; 6 김종민 22 남 80 270 #&gt; 7 김연아 29 여 70 250 #&gt; 8 김남준 24 남 92 290 #&gt; 9 이지은 26 여 93 210 # 또는 cbind를 활용할 수 있음 # salary 열 추가 salary2 &lt;- c(220, 180, 250, 170, 220, 270, 250, 290, 210) df &lt;- cbind(df, salary2) df #&gt; name age sex score salary salary2 #&gt; 1 유재석 24 남 90 220 220 #&gt; 2 홍진영 29 여 80 180 180 #&gt; 3 송가인 31 여 95 250 250 #&gt; 4 강호동 25 남 75 170 170 #&gt; 5 이영자 27 여 95 220 220 #&gt; 6 김종민 22 남 80 270 270 #&gt; 7 김연아 29 여 70 250 250 #&gt; 8 김남준 24 남 92 290 290 #&gt; 9 이지은 26 여 93 210 210 salary3 &lt;- c(220, 180, 250, 170, 220, 270, 250, 290, 210) new_data &lt;- data.frame(salary3) df &lt;- cbind(df, new_data) df #&gt; name age sex score salary salary2 salary3 #&gt; 1 유재석 24 남 90 220 220 220 #&gt; 2 홍진영 29 여 80 180 180 180 #&gt; 3 송가인 31 여 95 250 250 250 #&gt; 4 강호동 25 남 75 170 170 170 #&gt; 5 이영자 27 여 95 220 220 220 #&gt; 6 김종민 22 남 80 270 270 270 #&gt; 7 김연아 29 여 70 250 250 250 #&gt; 8 김남준 24 남 92 290 290 290 #&gt; 9 이지은 26 여 93 210 210 210 3.5.6.2 데이터 프레임 행열 삭제 3.5.6.2.1 행 삭제 # 9행 삭제 df &lt;- df[-9, ] df #&gt; name age sex score salary salary2 salary3 #&gt; 1 유재석 24 남 90 220 220 220 #&gt; 2 홍진영 29 여 80 180 180 180 #&gt; 3 송가인 31 여 95 250 250 250 #&gt; 4 강호동 25 남 75 170 170 170 #&gt; 5 이영자 27 여 95 220 220 220 #&gt; 6 김종민 22 남 80 270 270 270 #&gt; 7 김연아 29 여 70 250 250 250 #&gt; 8 김남준 24 남 92 290 290 290 # score 가 80이하 삭제 df &lt;- df[!df$score &lt; 80, ] df #&gt; name age sex score salary salary2 salary3 #&gt; 1 유재석 24 남 90 220 220 220 #&gt; 2 홍진영 29 여 80 180 180 180 #&gt; 3 송가인 31 여 95 250 250 250 #&gt; 5 이영자 27 여 95 220 220 220 #&gt; 6 김종민 22 남 80 270 270 270 #&gt; 8 김남준 24 남 92 290 290 290 3.5.6.2.2 열 삭제 # salary3 변수(열) 삭제 df$salary3 &lt;- NULL df #&gt; name age sex score salary salary2 #&gt; 1 유재석 24 남 90 220 220 #&gt; 2 홍진영 29 여 80 180 180 #&gt; 3 송가인 31 여 95 250 250 #&gt; 5 이영자 27 여 95 220 220 #&gt; 6 김종민 22 남 80 270 270 #&gt; 8 김남준 24 남 92 290 290 # 5열(salary)과 6열(salary2) 삭제 df &lt;- df[, -(5:6)] df #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 2 홍진영 29 여 80 #&gt; 3 송가인 31 여 95 #&gt; 5 이영자 27 여 95 #&gt; 6 김종민 22 남 80 #&gt; 8 김남준 24 남 92 3.5.7 기타 3.5.7.1 데이터 프레인 컬럼명 추출 names(df) #&gt; [1] &quot;name&quot; &quot;age&quot; &quot;sex&quot; &quot;score&quot; 3.5.7.2 데이터 프레임 컬럼(열) 개수 # 컬럼의 갯수 보기 ncol == length ncol(df); length(df) #&gt; [1] 4 #&gt; [1] 4 3.5.7.3 데이터 프레임 행 개수 nrow(df) #&gt; [1] 6 3.5.7.4 데이터 프레임 연산 # rowSums(), colSums(), colMeans(), rowMeans() # 연산을 위해 숫자가 아인 컬럼 제거 (1열 name, 3열 sex) df2 &lt;- df[, -c(1, 3)] df2 #&gt; age score #&gt; 1 24 90 #&gt; 2 29 80 #&gt; 3 31 95 #&gt; 5 27 95 #&gt; 6 22 80 #&gt; 8 24 92 colMeans(df2) #&gt; age score #&gt; 26.2 88.7 3.6 R 리스트 List 리스트(List)는 벡터, 행렬, 배열, 데이터 프레임 등과 같은 서로 다른 구조의 객체들을 하나로 묶은 것입니다. 기차처럼 이어서 묶어 놓은 것을 상상하면 될 것입니다. 3.6.1 리스트 만들기 숫자 벡터, 문자벡터, 행렬, 데이터 프레임을 하나로 묶어서 mylist라는 변수에 할당하겠습니다. # 숫자 벡터 numvec &lt;- seq(1, 10, by = 2) # 문자 벡터 strvec &lt;- c(&quot;대한&quot;, &quot;민국&quot;, &quot;행정&quot;) # 행렬 mtx &lt;- matrix(1:12, ncol = 3) # 데이터 프레임 name &lt;- c(&quot;유재석&quot;, &quot;홍진영&quot;, &quot;송가인&quot;, &quot;강호동&quot;, &quot;이영자&quot;, &quot;김종민&quot;, &quot;김연아&quot;) age &lt;- c(24, 28, 31, 25, 27, 22, 29) sex &lt;- c(&quot;남&quot;, &quot;여&quot;, &quot;여&quot;, &quot;남&quot;, &quot;여&quot;, &quot;남&quot;, &quot;여&quot;) score &lt;- c(90, 80, 85, 75, 95, 80, 70) df &lt;- data.frame(name, age, sex, score, stringsAsFactors = FALSE) # 리스트 만들기 : 리스트 요소에 이름이 지정되지 않음 mylist &lt;- list(numvec, strvec, mtx, df) mylist #&gt; [[1]] #&gt; [1] 1 3 5 7 9 #&gt; #&gt; [[2]] #&gt; [1] &quot;대한&quot; &quot;민국&quot; &quot;행정&quot; #&gt; #&gt; [[3]] #&gt; [,1] [,2] [,3] #&gt; [1,] 1 5 9 #&gt; [2,] 2 6 10 #&gt; [3,] 3 7 11 #&gt; [4,] 4 8 12 #&gt; #&gt; [[4]] #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 2 홍진영 28 여 80 #&gt; 3 송가인 31 여 85 #&gt; 4 강호동 25 남 75 #&gt; 5 이영자 27 여 95 #&gt; 6 김종민 22 남 80 #&gt; 7 김연아 29 여 70 # 리스트 요소에 이름을 지정하여 리스트 만들기 mylist &lt;- list(numvec = numvec, strvec = strvec, mtx = mtx, df = df) mylist #&gt; $numvec #&gt; [1] 1 3 5 7 9 #&gt; #&gt; $strvec #&gt; [1] &quot;대한&quot; &quot;민국&quot; &quot;행정&quot; #&gt; #&gt; $mtx #&gt; [,1] [,2] [,3] #&gt; [1,] 1 5 9 #&gt; [2,] 2 6 10 #&gt; [3,] 3 7 11 #&gt; [4,] 4 8 12 #&gt; #&gt; $df #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 2 홍진영 28 여 80 #&gt; 3 송가인 31 여 85 #&gt; 4 강호동 25 남 75 #&gt; 5 이영자 27 여 95 #&gt; 6 김종민 22 남 80 #&gt; 7 김연아 29 여 70 3.6.1.1 리스트 요소 이름 지정 또는 변경하기 names(mylist) &lt;- c(&quot;numbers&quot;, &quot;strings&quot;, &quot;matrix_num&quot;, &quot;df_score&quot;) mylist #&gt; $numbers #&gt; [1] 1 3 5 7 9 #&gt; #&gt; $strings #&gt; [1] &quot;대한&quot; &quot;민국&quot; &quot;행정&quot; #&gt; #&gt; $matrix_num #&gt; [,1] [,2] [,3] #&gt; [1,] 1 5 9 #&gt; [2,] 2 6 10 #&gt; [3,] 3 7 11 #&gt; [4,] 4 8 12 #&gt; #&gt; $df_score #&gt; name age sex score #&gt; 1 유재석 24 남 90 #&gt; 2 홍진영 28 여 80 #&gt; 3 송가인 31 여 85 #&gt; 4 강호동 25 남 75 #&gt; 5 이영자 27 여 95 #&gt; 6 김종민 22 남 80 #&gt; 7 김연아 29 여 70 3.6.2 리스트 구조 보기 # 리스트 구조 보기 str(mylist) #&gt; List of 4 #&gt; $ numbers : num [1:5] 1 3 5 7 9 #&gt; $ strings : chr [1:3] &quot;대한&quot; &quot;민국&quot; &quot;행정&quot; #&gt; $ matrix_num: int [1:4, 1:3] 1 2 3 4 5 6 7 8 9 10 ... #&gt; $ df_score :&#39;data.frame&#39;: 7 obs. of 4 variables: #&gt; ..$ name : chr [1:7] &quot;유재석&quot; &quot;홍진영&quot; &quot;송가인&quot; &quot;강호동&quot; ... #&gt; ..$ age : num [1:7] 24 28 31 25 27 22 29 #&gt; ..$ sex : chr [1:7] &quot;남&quot; &quot;여&quot; &quot;여&quot; &quot;남&quot; ... #&gt; ..$ score: num [1:7] 90 80 85 75 95 80 70 # 리스트에 있는 객체(요소)의 개수 length(mylist) #&gt; [1] 4 # 리스트 요소의 이름 추출 names(mylist) #&gt; [1] &quot;numbers&quot; &quot;strings&quot; &quot;matrix_num&quot; &quot;df_score&quot; 3.6.3 리스트에서 데이터 추출 3.6.3.1 특정 위치에 있는 데이터 추출하기 # 행렬(matrix_num) 요소 데이터 추출 # 리스트와 요소사이에 $기호가 사용됨 mylist$matrix_num #&gt; [,1] [,2] [,3] #&gt; [1,] 1 5 9 #&gt; [2,] 2 6 10 #&gt; [3,] 3 7 11 #&gt; [4,] 4 8 12 # 위치 번호 대신 요소 이름을 사용하여 추출 # []는 리스트의 하위 요소를 보여주는 것임. 타입은 list mylist[&quot;matrix_num&quot;]; typeof(mylist[&quot;matrix_num&quot;]) #&gt; $matrix_num #&gt; [,1] [,2] [,3] #&gt; [1,] 1 5 9 #&gt; [2,] 2 6 10 #&gt; [3,] 3 7 11 #&gt; [4,] 4 8 12 #&gt; [1] &quot;list&quot; # [[]]는 리스트 하위 요소의 데이터를 보여줌. 타입은 integer mylist[[&quot;matrix_num&quot;]]; typeof(mylist[[&quot;matrix_num&quot;]]) #&gt; [,1] [,2] [,3] #&gt; [1,] 1 5 9 #&gt; [2,] 2 6 10 #&gt; [3,] 3 7 11 #&gt; [4,] 4 8 12 #&gt; [1] &quot;integer&quot; # df$matrix_num 대신 아래처럼 사용 가능 - 3번째 요소 # mylist$numbers == mylist[[&quot;numbers&quot;]] == mylist[[1]] mylist$numbers; mylist[[&quot;numbers&quot;]]; mylist[[1]] #&gt; [1] 1 3 5 7 9 #&gt; [1] 1 3 5 7 9 #&gt; [1] 1 3 5 7 9 # 리스트의 strings 요소의 3번째 데이터 추출 # 아래 3가지 방식이 동일함 s1 &lt;- mylist$strings[3] s2 &lt;- mylist[[&quot;strings&quot;]][3] s3 &lt;- mylist[[2]][3] s1; s2; s3 #&gt; [1] &quot;행정&quot; #&gt; [1] &quot;행정&quot; #&gt; [1] &quot;행정&quot; # 리스트의 요소인 df_score 데이터 프레임의 name 변수 데이터 추출 mylist$df_score$name #&gt; [1] &quot;유재석&quot; &quot;홍진영&quot; &quot;송가인&quot; &quot;강호동&quot; &quot;이영자&quot; &quot;김종민&quot; &quot;김연아&quot; 3.6.4 리스트의 데이터 수정 # 리스트의 strings 요소의 3번째 데이터를 &quot;정부&quot;로 수정 mylist$strings[3] &lt;- &quot;정부&quot; mylist$strings #&gt; [1] &quot;대한&quot; &quot;민국&quot; &quot;정부&quot; 3.6.5 리스트 구조 수정 3.6.5.1 리스트 요소 추가 mylist$new_list &lt;- 1:5 str(mylist) #&gt; List of 5 #&gt; $ numbers : num [1:5] 1 3 5 7 9 #&gt; $ strings : chr [1:3] &quot;대한&quot; &quot;민국&quot; &quot;정부&quot; #&gt; $ matrix_num: int [1:4, 1:3] 1 2 3 4 5 6 7 8 9 10 ... #&gt; $ df_score :&#39;data.frame&#39;: 7 obs. of 4 variables: #&gt; ..$ name : chr [1:7] &quot;유재석&quot; &quot;홍진영&quot; &quot;송가인&quot; &quot;강호동&quot; ... #&gt; ..$ age : num [1:7] 24 28 31 25 27 22 29 #&gt; ..$ sex : chr [1:7] &quot;남&quot; &quot;여&quot; &quot;여&quot; &quot;남&quot; ... #&gt; ..$ score: num [1:7] 90 80 85 75 95 80 70 #&gt; $ new_list : int [1:5] 1 2 3 4 5 3.6.5.2 리스트 요소 제거 mylist$new_list &lt;- NULL str(mylist) #&gt; List of 4 #&gt; $ numbers : num [1:5] 1 3 5 7 9 #&gt; $ strings : chr [1:3] &quot;대한&quot; &quot;민국&quot; &quot;정부&quot; #&gt; $ matrix_num: int [1:4, 1:3] 1 2 3 4 5 6 7 8 9 10 ... #&gt; $ df_score :&#39;data.frame&#39;: 7 obs. of 4 variables: #&gt; ..$ name : chr [1:7] &quot;유재석&quot; &quot;홍진영&quot; &quot;송가인&quot; &quot;강호동&quot; ... #&gt; ..$ age : num [1:7] 24 28 31 25 27 22 29 #&gt; ..$ sex : chr [1:7] &quot;남&quot; &quot;여&quot; &quot;여&quot; &quot;남&quot; ... #&gt; ..$ score: num [1:7] 90 80 85 75 95 80 70 3.6.5.3 리스트 병합 list1 &lt;- list(x1 = 1:5, x2 = LETTERS) list2 &lt;- list(y1 = 11:17, y2 = letters) # 2개 리스트 병합 mlist &lt;- c(list1, list2) mlist #&gt; $x1 #&gt; [1] 1 2 3 4 5 #&gt; #&gt; $x2 #&gt; [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; #&gt; [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; #&gt; #&gt; $y1 #&gt; [1] 11 12 13 14 15 16 17 #&gt; #&gt; $y2 #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; #&gt; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; 3.6.6 리스트를 벡터로 변환 # 리스트를 벡터로 변환 unlist(list1) #&gt; x11 x12 x13 x14 x15 x21 x22 x23 x24 x25 x26 x27 x28 x29 x210 x211 #&gt; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; #&gt; x212 x213 x214 x215 x216 x217 x218 x219 x220 x221 x222 x223 x224 x225 x226 #&gt; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; # 리스트 요소를 벡터로 변환 unlist(mylist$numbers) #&gt; [1] 1 3 5 7 9 "],
["references.html", "References", " References "]
]
